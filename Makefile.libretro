
VERBOSE ?= 1
NOWERROR ?= 1
CONFIG ?= libretro
NO_USE_MIDI ?= 1
NO_USE_PORTAUDIO ?= 1
PTR64 ?= 1
TARGET ?= mame
# OS ?= linux
# TARGETOS ?= linux
PYTHON_EXECUTABLE ?= python3
REGENIE ?= 1
GITHUB_REPO ?= https://github.com/libretro/mame/
DEBUG ?= 0

#see https://github.com/libretro/mame/blob/093209930f5fbdaee0d6f3a3666f3d70025d089f/3rdparty/genie/build/gmake.darwin/genie.make#L55C2-L55C47
export LIBRETRO_OS
#this make file need dont better ad use vars instead of the way it done again can wait till the mac builds work
export ARCHOPTS
export ARCH
###########################################################################
#
#   LIBRETRO PLATFORM GUESSING
#
#   If the caller doesn't specify $platform and $ARCH, we guess
#
###########################################################################

UNAME_S = $(shell uname -s)
UNAME_M = $(shell uname -m)

ifeq ($(platform),)
	platform = unix

    ifeq ($(UNAME_M), arm64)
		platform = linux
	endif
endif
ifneq ($(ARCH),)
	LIBRETRO_CPU = $(ARCH)
	#GENIE makefiles use this variable fr something else unset if set
	ifeq ($(ARCH),x86)
		PTR64 := 0
	endif
	ARCH :=
$(info unsetting ARCH=$(LIBRETRO_CPU))
endif

ifeq ($(platform),)
$(error platform not set)
else
$(info platform=$(platform))
$(info Defaults cc=$(cc) CC=$(CC) CFLAGS=$(CFLAGS) CCFLAGS=$(CCFLAGS) CXXFLAGS=$(CXXFLAGS) LDFLAGS=$(LDFLAGS) ARCH=$(ARCH) arch=$(arch) NUMPROC=$(NUMPROC))
endif

ifeq ($(LIBRETRO_CPU),)
	ifeq ($(UNAME_M),)
		ifeq ($(PROCESSOR_ARCHITECTURE),ARM64)
			LIBRETRO_CPU = arm64
		endif
		ifeq ($(PROCESSOR_ARCHITEW6432),ARM64)
			LIBRETRO_CPU = arm64
		endif
	else ifeq ($(UNAME_M),arm64)
		LIBRETRO_CPU = arm64
	else
		LIBRETRO_CPU = $(UNAME_M)
	endif
endif



###########################################################################
#
#   BUILD FLAGS
#
###########################################################################

BUILDFLAGS = REGENIE=$(REGENIE) VERBOSE=$(VERBOSE) NOWERROR=$(NOWERROR) OSD=retro NO_USE_MIDI=$(NO_USE_MIDI) NO_USE_PORTAUDIO=$(NO_USE_PORTAUDIO)

ifneq ($(PYTHON_EXECUTABLE),)
	BUILDFLAGS += PYTHON_EXECUTABLE=$(PYTHON_EXECUTABLE)
endif
ifeq ($(DEBUG),1)
	BUILDFLAGS += CONFIG=libretrodbg
	BUILDFLAGS += SYMBOLS=1 SYMLEVEL=1 OPTIMIZE=g
else
	BUILDFLAGS += CONFIG=libretro
endif

###########################################################################
#
#   PLATFORM FLAGS
#
###########################################################################

PLATFLAGS =

# android only needs a valid ANDROID_NDK_HOME set no paths are needed toolchain and makefile takes care of that
# make CONFIG=libretero OSD=retro android-xxx is all thes required

else ifeq ($(platform), rpi3_64)
	TARGET = $(TARGET_NAME)_libretro.so
	fpic = -fPIC
	CFLAGS += $(fpic)
	LDFLAGS += $(fpic) -shared -Wl,--version-script=link.T
	PLATCFLAGS += -mcpu=cortex-a53 -mtune=cortex-a53
	PLATCFLAGS += -fomit-frame-pointer -ffast-math
	CXXFLAGS = $(CFLAGS) -fno-rtti -fno-exceptions
	CPU_ARCH := arm64
	PTR64 := 1
endif

ifeq ($(platform),linux32)
TARGETOS = linux
	PTR64 := 1
endif


ifneq ($(LIBRETRO_CPU),)
	PLATFLAGS += LIBRETRO_CPU=$(LIBRETRO_CPU)
endif
ifneq ($(FORCE_DRC_C_BACKEND),)
	PLATFLAGS += FORCE_DRC_C_BACKEND=$(FORCE_DRC_C_BACKEND)
endif

ifneq ($(PTR64),)
	PLATFLAGS += PTR64=$(PTR64)
endif

###########################################################################
#
#   TARGET FLAGS
#
###########################################################################

TARGETFLAGS =
ifneq ($(TARGET),)
	TARGETFLAGS += TARGET=$(TARGET)
endif
ifneq ($(SUBTARGET),)
	TARGETFLAGS += SUBTARGET=$(SUBTARGET)
endif
ifneq ($(SOURCES),)
	TARGETFLAGS += SOURCES=$(SOURCES)
endif

###########################################################################
#
#   MAKE RULES
#
#   We just call upstream GENie here with appropriate args
#
###########################################################################

# MAKEFILE is set by libretro gitlab-ci, but it confuses GENIE. So, unset it.
# undefine <var> is not supported on make 3.81 (used by macosx).
MAKEFILE :=

all: build

build:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS)

vs2019:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS) vs2019

clean:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS) clean

.PHONY: all build clean vs2019
